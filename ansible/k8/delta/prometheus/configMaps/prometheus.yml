apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-conf
data:
  alerts.conf: |
    ALERT HookDockUnresponsive
      IF up == 0
      FOR 10m
      LABELS {
        reportTo = "drake",
        type = "unresponsive"
      }
      ANNOTATIONS {
        summary = "({{ $labels.env }}) Dock unresponsive host={{ $labels.hostIp }} labels={{ $labels }}",
        description = "(hook) Dock unresponsive host={{ $labels.hostIp }} labels={{ $labels }}"
      }
    
    ALERT DockUnresponsive
      IF up == 0
      FOR 1h
      LABELS {
        reportTo = "pagerduty"
      }
      ANNOTATIONS {
        summary = "({{ $labels.env }}) Dock unresponsive host={{ $labels.hostIp }} labels={{ $labels }}",
        description = "Dock unresponsive host={{ $labels.hostIp }} labels={{ $labels }"
      }
    
    ALERT HookDockDockerDiskFull
      IF (node_filesystem_size{device="/dev/xvdb"} - node_filesystem_free{device="/dev/xvdb"}) / node_filesystem_size{device="/dev/xvdb"}  * 100 > 70
      FOR 5m
      LABELS {
        reportTo = "drake",
        type = "disk_filled"
      }
      ANNOTATIONS {
        summary = "({{ $labels.env }}) Dock /docker disk 70% host={{ $labels.hostIp }} labels={{ $labels }}",
        description = "(hook) Dock /docker disk 70% host={{ $labels.hostIp }} labels={{ $labels }}"
      }
    
    ALERT DockDockerDiskFull
      IF (node_filesystem_size{device="/dev/xvdb"} - node_filesystem_free{device="/dev/xvdb"}) / node_filesystem_size{device="/dev/xvdb"}  * 100 > 90
      FOR 30m
      LABELS {
        reportTo = "pagerduty"
      }
      ANNOTATIONS {
        summary = "({{ $labels.env }}) Dock /docker disk 90% host={{ $labels.hostIp }} labels={{ $labels }}",
        description = "Playbook here: https://github.com/CodeNow/devops-scripts/wiki/server-out-of-disk"
      }
    
    ALERT DockRootDiskFull
      IF (node_filesystem_size{device="/dev/xvda1"} - node_filesystem_free{device="/dev/xvda1"}) / node_filesystem_size{device="/dev/xvda1"}  * 100 > 90
      FOR 5m
      LABELS {
        reportTo = "pagerduty"
      }
      ANNOTATIONS {
        summary = "({{ $labels.env }}) Dock root disk 90% host={{ $labels.hostIp }} labels={{ $labels }}",
        description = "Playbook here: https://github.com/CodeNow/devops-scripts/wiki/server-out-of-disk"
      }
    
    ALERT HookDockOutOfRam
      IF (node_memory_MemFree + node_memory_Buffers + node_memory_Cached) < 150000000
      FOR 5m
      LABELS {
        reportTo = "drake",
        type = "memory_exhausted"
      }
      ANNOTATIONS {
        summary = "({{ $labels.env }}) Dock out of ram host={{ $labels.hostIp }} labels={{ $labels }}",
        description = "(hook) Dock out of ram host={{ $labels.hostIp }} labels={{ $labels }}"
      }
    
    ALERT DockOutOfRam
      IF (node_memory_MemFree + node_memory_Buffers + node_memory_Cached) < 130000000
      FOR 30m
      LABELS {
        reportTo = "pagerduty"
      }
      ANNOTATIONS {
        summary = "({{ $labels.env }}) Dock out of ram host={{ $labels.hostIp }} labels={{ $labels }}",
        description = "unhealthy dock {{ $labels.hostIp } using dock-cli and message slack #customer channel with labels={{ $labels }}"
      }
    
    ALERT DockHighLoad
      IF node_load15 > 90
      FOR 30m
      LABELS {
        reportTo = "pagerduty"
      }
      ANNOTATIONS {
        summary = "({{ $labels.env }}) Dock is experiencing high load host={{ $labels.hostIp }} labels={{ $labels }}",
        description = "ssh {{ $labels.hostIp }} into dock make sure it is responsive, if it is not, unhealthy. `docks unhealthy -e delta {{ $labels.hostIp }}`"
      }

  prometheus.yml: |
    # my global config
    global:
      scrape_interval:     1m
      evaluation_interval: 1m

    rule_files:
    - "alerts.conf"

    scrape_configs:
    # monitor self to get metrics for prometheus
    - job_name:     prometheus
      metrics_path: /metrics
      static_configs:
        - targets: [ 'localhost:9090' ]


    # pulls server list from ec2 and drops all servers that are not in env or a dock
    - job_name:         container_info
      scrape_interval:     30m
      # keys to access this region and port of prom
      ec2_sd_configs:
        - region:     us-west-2
          access_key: AKIAIFG37NSI6O2QMRRQ
          secret_key: 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
          port:       29007

      # drop all servers not in this env and not a dock
      relabel_configs:
      - source_labels: [__meta_ec2_tag_aws_autoscaling_groupName]
        regex:         delta-asg-dock-pool
        action:        drop

      - source_labels: [__meta_ec2_tag_env]
        regex:         production-delta
        action:        keep

      - source_labels: [__meta_ec2_tag_role]
        regex:         dock
        action:        keep

      - source_labels: [__meta_ec2_tag_org]
        target_label:  githubOrgId

      - source_labels: [__meta_ec2_private_ip]
        target_label:  hostIp

      - source_labels: [__meta_ec2_tag_env]
        target_label:  env

    # pulls server list from ec2 and drops all servers that are not production gamma or a dock
    - job_name:         server_info
      # keys to access this region and port of prom
      ec2_sd_configs:
        - region:     us-west-2
          access_key: AKIAIFG37NSI6O2QMRRQ
          secret_key: 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
          port:       29006

      # drop all servers not in this env and not a dock
      relabel_configs:
      - source_labels: [__meta_ec2_tag_aws_autoscaling_groupName]
        regex:         delta-asg-dock-pool
        action:        drop

      - source_labels: [__meta_ec2_tag_env]
        regex:         production-delta
        action:        keep

      - source_labels: [__meta_ec2_tag_role]
        regex:         dock
        action:        keep

      - source_labels: [__meta_ec2_tag_org]
        target_label:  githubOrgId

      - source_labels: [__meta_ec2_private_ip]
        target_label:  hostIp

      - source_labels: [__meta_ec2_tag_env]
        target_label:  env
