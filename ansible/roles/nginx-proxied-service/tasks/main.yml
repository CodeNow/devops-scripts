---
- name: get socket server container ids
  tags: [ configure_proxy, deploy ]
  become: yes
  when: new_container_ids is not defined
  shell: >
    docker ps --format {% raw %}"{{\.Image}}\t{{\.ID}}"{% endraw %} |
    grep socket |
    cut -f2
  args:
    executable: /bin/bash
  register: new_container_ids

# Get port information from the hosted service
- name: get socket server ports
  tags: [ configure_proxy, deploy ]
  become: true
  when: hosted_ports is defined
  shell: |
    for c in {{ new_container_ids.stdout_lines|join(' ') }}; do
      {% for hosted_port in hosted_ports %}
        docker port $c {{ hosted_port }} | cut -d ':' -f 2
      {% endfor %}
    done
  args:
    executable: /bin/bash
  register: proxy_target_ports

# everything from this point on is delegated to the nginx host
- name: print target info
  delegate_to: "{{ nginx_host }}"
  tags: [ configure_proxy, deploy ]
  debug:
    msg: |
      proxy target ports -- {{ proxy_target_ports }}
      ip -- {{ target_ip_address }}

- name: assert nginx other-sites-enabled directory
  tags: [ configure_proxy, deploy ]
  become: yes
  file:
    state: directory
    dest: /etc/nginx/sites-enabled

- name: put configuration in place
  delegate_to: "{{ nginx_host }}"
  tags: [ configure_proxy, deploy ]
  become: yes
  template:
    src: "{{ item }}"
    dest: /etc/nginx/sites-enabled/{{ item }}
  with_items: "{{ templates }}"

- name: reload nginx
  delegate_to: "{{ nginx_host }}"
  tags: [ configure_proxy, deploy ]
  become: yes
  shell: >
    docker ps |
    awk '/nginx/{ print $1 }' |
    xargs -n 1 docker kill --signal SIGHUP
  args:
    executable: /bin/bash
