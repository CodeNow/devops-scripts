---
# commands to build an image
#
- name: Ensure Tag Deploy For Prod
  tags: deploy
  when: node_env is defined and node_env=="production-delta" and not git_branch | match("^v([0-9]+)\.([0-9]+)\.([0-9]+)$")
  fail: msg="only tag can be deployed on prod not {{ git_branch }}"

- name: create build folder
  become: true
  file:
    path: "{{ build_dir }}/{{ name }}"
    state: directory

- name: pull the git repository
  tags: deploy
  become: true
  git:
    repo: "{{ repo }}"
    dest: "{{ build_dir }}/{{ name }}/repo"
    version: "{{ git_branch }}"
    update: yes
    accept_hostkey: yes
    force: yes

- name: get new tags from remote
  tags: deploy
  become: true
  shell: "git fetch --tags"
  args:
    chdir: "{{ build_dir }}/{{ name }}/repo"

- name: get latest tag name
  tags: deploy
  become: true
  shell: "git describe --tags `git rev-list --tags --max-count=1`"
  args:
    chdir: "{{ build_dir }}/{{ name }}/repo"
  register: latest_tag

- name: ensure latest tag is deployed
  tags: deploy
  fail: msg="Cannot deploy -{{ git_branch }}- because latest is -{{latest_tag.stdout}}-. Bypass with `-t i_am_deploying_an_old_tag`"
  when: (node_env is not defined or node_env is defined and node_env=="production-delta") and
        (latest_tag.stdout != git_branch and i_am_deploying_an_old_tag is not defined)

- name: copy dockerfile to build folder
  tags: deploy
  become: true
  template:
    src: "{{ dockerfile }}"
    dest: "{{ build_dir }}/{{ name }}"

- name: copy secrets into build dir
  tags: [ deploy ]
  become: true
  copy:
    src=./secrets/docker-client/{{ file_name_item }}
    dest={{ build_dir }}/{{ name }}
    owner=ubuntu
    group=ubuntu
    mode=0700
  with_items:
    - id_rsa
    - known_hosts
  loop_control:
    loop_var: file_name_item

- name: build docker image and tag
  tags: deploy
  become: yes
  command: docker build {{ build_args | default("") }} --tag="{{ container_image }}:{{ container_tag }}" "{{ build_dir }}/{{ name }}"

- name: remove secrets from build dir
  tags: [ deploy ]
  become: true
  file:
    path: "{{ build_dir }}/{{ name }}/{{ file_name_item }}"
    state: absent
  with_items:
    - id_rsa
    - known_hosts
  loop_control:
    loop_var: file_name_item

- name: push docker image
  become: yes
  when: not do_not_push
  command: docker push {{ container_image }}:{{ container_tag }}
