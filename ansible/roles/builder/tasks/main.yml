---
- name: Ensure Tag Deploy For Prod
  tags: deploy, build
  when: node_env=="production-delta" and not git_branch | match("^v([0-9]+)\.([0-9]+)\.([0-9]+)$")
  fail: msg="only tag can be deployed on prod not {{ git_branch }}"

- name: create build folder
  delegate_to: "{{ builder }}"
  tags: build
  become: true
  file:
    path: "{{ build_dir }}/{{ name }}"
    state: directory

- name: pull the git repository
  delegate_to: "{{ builder }}"
  tags: deploy, build
  become: true
  git:
    repo: "{{ repo }}"
    dest: "{{ build_dir }}/{{ name }}/repo"
    version: "{{ git_branch }}"
    update: yes
    accept_hostkey: yes
    force: yes

- name: get new tags from remote
  delegate_to: "{{ builder }}"
  tags: deploy, build
  become: true
  shell: "git fetch --tags"
  args:
    chdir: "{{ build_dir }}/{{ name }}/repo"

- name: get latest tag name
  delegate_to: "{{ builder }}"
  tags: deploy, build
  become: true
  shell: "git describe --tags `git rev-list --tags --max-count=1`"
  args:
    chdir: "{{ build_dir }}/{{ name }}/repo"
  register: latest_tag

- name: ensure latest tag is deployed
  delegate_to: "{{ builder }}"
  tags: deploy, build
  fail: msg="Cannot deploy {{ git_branch }} because latest is {{latest_tag.stdout}}. Bypass with `-t i_am_deploying_an_old_tag`"
  when: node_env=="production-delta" and latest_tag.stdout != git_branch and i_am_deploying_an_old_tag is not defined

- name: copy dockerfile to build folder
  delegate_to: "{{ builder }}"
  tags: deploy, build
  become: true
  template:
    src: "{{ dockerfile }}"
    dest: "{{ build_dir }}/{{ name }}"

- name: build docker image and tag
  delegate_to: "{{ builder }}"
  tags: deploy, build
  become: yes
  ignore_errors: True
  command: docker build {{ build_args | default("") }} --tag="{{ container_image }}:{{ container_tag }}" "{{ build_dir }}/{{ name }}"

- name: push docker image
  delegate_to: "{{ builder }}"
  tags: deploy, build
  become: yes
  ignore_errors: True
  command: docker push {{ container_image }}:{{ container_tag }}
