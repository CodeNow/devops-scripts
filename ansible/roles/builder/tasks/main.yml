---
# commands to build an image
- name: check if image is a tag and check environment
  tags: deploy
  set_fact:
    is_image_tag: '{{ git_branch | match("^v([0-9]+)\.([0-9]+)\.([0-9]+)$") }}'
    is_production_delta: '{{  node_env is defined and node_env=="production-delta" }}'

- name: Ensure Tag Deploy For Prod
  tags: deploy
  when: (is_production_delta and not is_image_tag)
  fail: msg="only tag can be deployed on prod not {{ container_tag }}"

- name: set if is image tag and production delta
  tags: deploy
  set_fact:
    is_prod_and_tag: "{{ is_image_tag and is_production_delta }}"

- name: query registry for tag
  tags: deploy
  uri:
    # Overwrite the name of the image repository (`runnable-angular`, big-poppa-http) with `repository_name`
    url: https://quay.io/api/v1/repository/runnable/{{ repository_name | default(name) }}/tag/?limit=1&specificTag={{ container_tag }}
    method: GET
    headers:
      Authorization: 'Bearer QB9UzzNhwClqMgRyMgNGrSGLdUYZPJLJALdcpKRa'
  register: currently_built_tags

- name: set number of images built
  tags: deploy
  set_fact:
    no_images_found: "{{ currently_built_tags|json_query('json.tags')|length == 0  }}"

- name: set number of images built
  tags: deploy
  set_fact:
    # Only build the image if no images are found
    # Use built images in staging/gamma unless forced
    build_image: '{{ no_images_found or (force_image_push is defined and force_image_push) }}'
    # Only push the image if on prod environment
    # Also, only push image if and no images are found or image push is forced
    # Use `-e "force_push_image=true"` in the command line to force image push
    push_image: '{{ is_prod_and_tag and (no_images_found or (force_image_push is defined and force_image_push)) }}'

- name: create build folder
  become: true
  when: build_image
  file:
    path: "{{ build_dir }}/{{ name }}"
    state: directory

- name: pull the git repository
  tags: deploy
  when: build_image
  become: true
  git:
    repo: "{{ repo }}"
    dest: "{{ build_dir }}/{{ name }}/repo"
    version: "{{ container_tag }}"
    update: yes
    accept_hostkey: yes
    force: yes

- name: get new tags from remote
  tags: deploy
  when: build_image
  become: true
  shell: "git fetch --tags"
  args:
    chdir: "{{ build_dir }}/{{ name }}/repo"

- name: get latest tag name
  tags: deploy
  when: build_image
  become: true
  shell: "git describe --tags `git rev-list --tags --max-count=1`"
  args:
    chdir: "{{ build_dir }}/{{ name }}/repo"
  register: latest_tag

- name: ensure latest tag is deployed
  tags: deploy
  fail: msg="Cannot deploy {{ container_tag}} because latest is {{latest_tag.stdout}}. Bypass with `-t i_am_deploying_an_old_tag`"
  when: build_image and is_production_delta and (latest_tag.stdout != container_tag and i_am_deploying_an_old_tag is not defined)

- name: copy dockerfile to build folder
  tags: deploy
  when: build_image
  become: true
  template:
    src: "{{ dockerfile }}"
    dest: "{{ build_dir }}/{{ name }}"

- name: copy .dockerignore file into build folder
  tags: deploy
  when: build_image
  become: true
  template:
    src: ".dockerignore"
    dest: "{{ build_dir }}/{{ name }}"

- name: copy secrets into build dir
  tags: [ deploy ]
  when: build_image
  become: true
  copy:
    src=./secrets/docker-client/{{ file_name_item }}
    dest={{ build_dir }}/{{ name }}
    owner=ubuntu
    group=ubuntu
    mode=0700
  with_items:
    - id_rsa
    - known_hosts
  loop_control:
    loop_var: file_name_item

- name: build docker image and tag
  tags: deploy
  when: build_image
  become: yes
  command: docker build {{ build_args | default("") }} --tag="{{ container_image }}:{{ container_tag }}" "{{ build_dir }}/{{ name }}"

- name: remove secrets from build dir
  tags: [ deploy ]
  when: build_image
  become: true
  file:
    path: "{{ build_dir }}/{{ name }}/{{ file_name_item }}"
    state: absent
  with_items:
    - id_rsa
    - known_hosts
  loop_control:
    loop_var: file_name_item

- name: login to registry
  tags: deploy
  become: yes
  when: build_image and push_image
  command: docker login -u {{ registry_username }} -p {{ registry_token }} {{ registry_host }}

- name: push docker image
  tags: deploy
  become: yes
  when: build_image and push_image
  command: docker push {{ container_image }}:{{ container_tag }}

- name: logout of registry
  tags: deploy
  become: yes
  when: build_image and push_image
  command: docker logout
