---
# get current running containers
- shell: sudo docker ps | grep "{{container_image}}" | awk '{print $1}'
  register: old_containers_ids

- name: get latest images
  command: sudo docker pull "{{container_image}}"

- name: get id of latest image
  shell: sudo docker images --no-trunc | grep {{container_image}}.*{{container_tag}} | awk '{print $3}'
  register: new_image_id

# ASSUME ONLY 1 KIND OF CONTAINER CAN RUN
- name: get current running container image id
  shell: sudo docker inspect {{old_containers_ids.stdout_lines[0]}} | grep Image | grep -v {{container_image}} | awk -F '"' '{print $4}'
  register: running_container_image_id
  when: old_containers_ids.stdout_lines[0] is defined

- name: start container
  command: sudo docker run --restart=always {{container_run_cmd}}
  when: old_containers_ids.stdout_lines[0] is not defined or running_container_image_id.stdout != new_image_id.stdout
  register: new_container_id
  notify:
    - get new container ports
    - update redis key
    - stop old containers

# if there are other containres on system other then on we want kill them
- script: normalize.sh {{new_image_id.stdout}} {{container_image}}
  when: new_container_id|skipped and old_containers_ids.stdout_lines[0] is defined
