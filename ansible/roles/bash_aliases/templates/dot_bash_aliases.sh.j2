# Follows the logfile for a given app_name interpolating the datetime string into the logpath (/var/log/runnable/YYYY/MM/DD/HH/<app_name>.log)
# Usage: logtail <app_name>

logpath() {
    local app_name="$1"
    local datetime=`date +%Y/%m/%d/%H`
    local app_log_dir="{{ app_log_dir }}"
    echo "${app_log_dir}/${datetime}/${app_name}.log"
}

logtail() {
    local app_name="$1"
    tail -f $(logpath ${app_name}) | bunyan
}

# Follows the logfile for a given app_name interpolating the datetime string into the logpath (/var/log/runnable/YYYY/MM/DD/HH/<app_name>.log)
# Usage: lograw <app_name>
lograw() {
    local app_name="$1"
    tail -f $(logpath ${app_name}) 
}

# Just display the last few lines of a log (2nd arg specifies # of lines or tail default if left blank)
# Usage: loglast <app_name> [ <#_of_lines> ]
loglast() {
    local app_name="$1"
    local tailopts=""
    # do not check contents of $2, just if exists, escape jinja2 keyword.
    if [ 2 -eq "{{ '${#}' }}" ] ; then
        tailopts="-${2}" 
    fi
    tail ${tailopts} $(logpath ${app_name}) | bunyan
}

# Follow a log, grep for "${regexp}"
# Usage: greplog <app_name> <regexp>
greplog() {
    local app_name="$1"
    local regexp=""
    # again, not checking arg2, just making sure it exists, and espace jinja2 keyword.
    if [ 2 -eq "{{ '${#}' }}" ] ; then
        regexp="${2}" 
    fi
    tail -f $(logpath ${app_name}) | grep ${regexp} | bunyan
}

# Outputs contents of an npm start log for <app_name>, if it exists, into a pager for reading.
# Usage: npmlog <app_name>
npmlog() {
    less $(logpath ${app_name})
}
