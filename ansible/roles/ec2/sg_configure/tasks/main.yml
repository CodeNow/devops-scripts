#- name: install Python Boto
#  become: true
#  apt: name=python-boto state=latest

- name: Bastion
  tags:
    - bastion
  ec2_group:
    name: "{{ env }}-bastion"
    description: "{{ env }} Bastion Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ bastion_sshd_port }}"
        to_port: "{{ bastion_sshd_port }}"
        cidr_ip: "{{ ip_all }}"

- name: Arithmancy SG
  tags:
    - arithmancy
  ec2_group:
    name: "{{ env }}-arithmancy"
    description: "{{ env }} Arithmancy Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"

- name: API SG
  tags:
    - api
  ec2_group:
    name: "{{ env }}-api"
    description: "{{ env }} API Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ container_min_port }}"
        to_port: "{{ container_max_port }}"
        group_id: "{{ sg_hipache }}"

- name: API ELB SG
  tags:
    api-elb
  ec2_group:
    name: "{{ env }}-api-elb"
    description: "{{ env }} API ELB Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: icmp
        from_port: -1
        to_port: -1
        cidr_ip: "{{ ip_all }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        cidr_ip: "{{ ip_all }}"
      - proto: tcp
        from_port: "{{ https_port }}"
        to_port: "{{ https_port }}"
        cidr_ip: "{{ ip_all }}"

- name: Big Poppa SG
  tags:
    - big-poppa
  ec2_group:
    name: "{{ env }}-big-poppa"
    description: "{{ env }} Big Poppa Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"

- name: Big Poppa HTTP SG
  tags:
    - big-poppa-http
  ec2_group:
    name: "{{ env }}-big-poppa-http"
    description: "{{ env }} Big Poppa HTTP Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_big_poppa }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_cream }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_eru }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_khronos }}"

- name: Consul Service SG
  tags:
    - consul
  ec2_group:
    name: "{{ env }}-consul"
    description: "{{ env }} Consul Service Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: icmp
        from_port: -1
        to_port: -1
        group_id: "{{ sg_consul }}"
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ consul_rpc_min_port }}"
        to_port: "{{ consul_rpc_max_port }}"
        group_id: "{{ sg_consul }}"
      - proto: udp
        from_port: "{{ consul_rpc_min_port }}"
        to_port: "{{ consul_rpc_max_port }}"
        group_id: "{{ sg_consul }}"
      - proto: tcp
        from_port: "{{ consul_cli_port }}"
        to_port: "{{ consul_cli_port }}"
        group_id: "{{ sg_consul }}"
      - proto: tcp
        from_port: "{{ vault_api_port }}"
        to_port: "{{ vault_api_ssl_port }}"
        cidr_ip: "{{ env_cidr_all }}"
      - proto: tcp
        from_port: "{{ consul_api_port }}"
        to_port: "{{ consul_api_ssl_port }}"
        cidr_ip: "{{ env_cidr_all }}"

- name: C.R.E.A.M. SG
  tags:
    - cream
  ec2_group:
    name: "{{ env }}-big-poppa"
    description: "{{ env }} C.R.E.A.M. Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"

- name: C.R.E.A.M. HTTP SG
  tags:
    - cream-http
  ec2_group:
    name: "{{ env }}-cream-http"
    description: "{{ env }} C.R.E.A.M. HTTP Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_cream }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_api }}"

- name: On-Dock Services SG
  tags:
    - dock
  ec2_group:
    name: "{{ env }}-dock"
    description: "{{ env }} Dock Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: udp
        from_port: "{{ named_port }}"
        to_port: "{{ named_port }}"
        group_id: "{{ sg_dock }}"
      - proto: tcp
        from_port: "{{ named_port }}"
        to_port: "{{ named_port }}"
        group_id: "{{ sg_dock }}"
      - proto: tcp
        from_port: "{{ krain_port }}"
        to_port: "{{ krain_port }}"
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: "{{ docker_port }}"
        to_port: "{{ docker_port }}"
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: "{{ docker_port }}"
        to_port: "{{ docker_port }}"
        group_id: "{{ sg_docker_listener }}"
      - proto: tcp
        from_port: "{{ docker_port }}"
        to_port: "{{ docker_port }}"
        group_id: "{{ sg_khronos }}"
      - proto: tcp
        from_port: "{{ docker_port }}"
        to_port: "{{ docker_port }}"
        group_id: "{{ sg_palantiri }}"
      - proto: tcp
        from_port: "{{ docker_port }}"
        to_port: "{{ docker_port }}"
        group_id: "{{ sg_sauron }}"
      - proto: tcp
        from_port: "{{ docker_port }}"
        to_port: "{{ docker_port }}"
        group_id: "{{ sg_swarm_manager}}"
      - proto: udp
        from_port: "{{ weave_port }}"
        to_port: "{{ weave_port }}"
        group_id: "{{ sg_dock }}"
      - proto: tcp
        from_port: "{{ weave_port }}"
        to_port: "{{ weave_port }}"
        group_id: "{{ sg_dock }}"
      - proto: tcp
        from_port: "{{ vault_api_port }}"
        to_port: "{{ vault_api_ssl_port }}"
        group_id: "{{ sg_dock }}"
      - proto: tcp
        from_port: "{{ container_min_port }}"
        to_port: "{{ container_max_port }}"
        group_id: "{{ sg_userland }}"
      - proto: tcp
        from_port: "{{ container_min_port }}"
        to_port: "{{ container_max_port }}"
        group_id: "{{ sg_navi }}"

- name: Detention SG
  tags:
    - detention
  ec2_group:
    name: "{{ env }}-detention"
    description: "{{ env }} Detention Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ detention_port }}"
        to_port: "{{ detention_port }}"
        group_id: "{{ sg_navi }}"

- name: Docker Listener SG
  tags:
    - docker-listener
  ec2_group:
    name: "{{ env }}-docker-listener"
    description: "{{ env }} Detention Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"

- name: Drake SG
  tags:
     - drake
  ec2_group:
    name: "{{ env }}-drake"
    description: "{{ env }}-drake"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"

- name: Drake ELB SG
  tags:
     - drake_elb
  ec2_group:
    name: "{{ env }}-drake"
    description: "{{ env }}-drake"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_drake }}"
      - proto: tcp
        from_port: "{{ https_port }}"
        to_port: "{{ https_port }}"
        group_id: "{{ sg_drake }}"

- name: Eru SG
  tags:
     - eru
  ec2_group:
    name: "{{ env }}-eru"
    description: "{{ env }}-eru"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"

- name: Eru ELB SG
  tags:
     - eru_elb
  ec2_group:
    name: "{{ env }}-eru"
    description: "{{ env }}-eru"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_eru }}"
      - proto: tcp
        from_port: "{{ https_port }}"
        to_port: "{{ https_port }}"
        group_id: "{{ sg_eru }}"

- name: Github Varnish SG
  tags:
     - github_varnish
  ec2_group:
    name: "{{ env }}-github_varnish"
    description: "{{ env }}-github_varnish"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ github_varnish_port }}"
        to_port: "{{ github_varnish_port }}"
        group_id: "{{ sg_github_varnish }}"

- name: Link SG
  tags:
     - link
  ec2_group:
    description: "{{ env }}-link"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"

- name: MongoDB SG
  tags:
    - mongo
  ec2_group:
    name: "{{ env }}-mongo"
    description: "{{ env }} MongoDB Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_big_poppa }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_mongo }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_eru }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_khronos }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_pheidi }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_app_services }}"

- name: Navi Mongo DB SG
  tags:
    - navi-mongo
  ec2_group:
    name: "{{ env }}-mongo-navi"
    description: "{{ env }} Mongo Navi Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_navi_mongo }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_link }}"
      - proto: tcp
        from_port: 27000
        to_port: 27020
        group_id: "{{ sg_navi }}"

- name: Navi SG
  tags:
    - navi
  ec2_group:
    name: "{{ env }}-navi"
    description: "{{ env }} Navi Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ navi_http_port }}"
        to_port: "{{ navi_http_port }}"
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: "{{ navi_http_port }}"
        to_port: "{{ navi_http_port }}"
        group_id: "{{ sg_link }}"
      - proto: tcp
        from_port: "{{ navi_http_port }}"
        to_port: "{{ navi_http_port }}"
        group_id: "{{ sg_navi }}"
      - proto: tcp
        from_port: "{{ navi_http_port }}"
        to_port: "{{ navi_http_port }}"
        group_id: "{{ sg_hipache }}"

- name: Optimus SG
  tags:
    - optimus
  ec2_group:
    name: "{{ env }}-optimus"
    description: "{{ env }} Optimus Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ http_port }}"
        group_id: "{{ sg_optimus }}"

- name: Palantiri SG
  tags:
     - palantiri
  ec2_group:
    description: "{{ env }}-link"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"

- name: Pheidi SG
  tags:
     - pheidi
  ec2_group:
    description: "{{ env }}-link"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"

- name: RabbitMQ SG
  tags:
    - rabbit
  ec2_group:
    name: "{{ env }}-rabbit"
    description: "{{ env }} RabbitMQ Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_acce:%s/ss_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_api_socket }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_api_worker }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_navi }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_big_poppa }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_cream }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_docker_listener }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_drake }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_eru }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_khronos }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_link }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_palantiri }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_pheidi }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_sauron }}"
      - proto: tcp
        from_port: "{{ rabbitmq_port }}"
        to_port: "{{ rabbitmq_tls_port }}"
        group_id: "{{ sg_shiva }}"

- name: RDS SG
  tags:
    - rds
  ec2_group:
    name: "{{ env }}-rds"
    description: "{{ env }} RDS Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: 5432
        to_port: 5432
        group_id: "{{ sg_arithmancy }}"
      - proto: tcp
        from_port: 5432
        to_port: 5432
        group_id: "{{ sg_big_poppa }"
      - proto: tcp
        from_port: 5432
        to_port: 5432
        group_id: "{{ sg_shiva }"

- name: Redis SG
  tags:
    - redis
  ec2_group:
    name: "{{ env }}-redis"
    description: "{{ env }} Redis Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ redis_port }}"
        to_port: "{{ redis_tls_port }}"
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: "{{ redis_port }}"
        to_port: "{{ redis_tls_port }}"
        group_id: "{{ sg_dock }}"
      - proto: tcp
        from_port: "{{ redis_port }}"
        to_port: "{{ redis_tls_port }}"
        group_id: "{{ sg_eru }}"
      - proto: tcp
        from_port: "{{ redis_port }}"
        to_port: "{{ redis_tls_port }}"
        group_id: "{{ sg_navi }}"
      - proto: tcp
        from_port: "{{ redis_port }}"
        to_port: "{{ redis_tls_port }}"
        group_id: "{{ sg_shiva }}"

- name: Registry SG
  tags:
    - registry
  ec2_group:
    name: "{{ env }}-registry"
    description: "{{ env }} Registry Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ http_port }}"
        cidr_ip: "{{ env_cidr_all }}"

- name: Sauron SG
  tags:
     - sauron
  ec2_group:
    description: "{{ env }}-link"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"

- name: Shiva SG
  tags:
     - shiva
  ec2_group:
    description: "{{ env }}-link"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"

- name: Swarm Manager SG
  tags:
    - swarm-manager
  ec2_group:
    description: "{{ env }}-swarm-manager"
    vcp_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ sshd_port }}"
        to_port: "{{ sshd_port }}"
        group_id: "{{ sg_bastion }}"
      - proto: tcp
        from_port: "{{ swarm_port }}"
        to_port: "{{ swarm_port }}"
        group_id: "{{ sg_api }}"
      - proto: tcp
        from_port: "{{ swarm_port }}"
        to_port: "{{ swarm_port }}"
        group_id: "{{ sg_docker_listener }}"
      - proto: tcp
        from_port: "{{ swarm_port }}"
        to_port: "{{ swarm_port }}"
        group_id: "{{ sg_khronos }}"
      - proto: tcp
        from_port: "{{ swarm_port }}"
        to_port: "{{ swarm_port }}"
        group_id: "{{ sg_sauron }}"
      - proto: tcp
        from_port: "{{ swarm_port }}"
        to_port: "{{ swarm_port }}"
        group_id: "{{ sg_swarm_manager }}"

- name: Userland Hipache
  tags:
    - userland
  ec2_group:
    name: "{{ env }}-userland"
    description: "{{ env }} Userland Hipache Security Policy"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_access_key: "{{ aws_access_key }}"
    rules:
      - proto: tcp
        from_port: "{{ http_port }}"
        to_port: "{{ container_max_port }}"
        cidr_ip: "{{ ip_all }}"
