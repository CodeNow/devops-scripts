name: pheidi
app_name: "{{ name }}"
security_groups: "{{ sg_app_services }}"

# copy certs into docker image:
docker_client_certs: {% if node_env != "production-epsilon" %} true {% endif %}

container_image: "registry.runnable.com/runnable/{{ name }}"
container_tag: "{{ git_branch }}"
repo: "git@github.com:CodeNow/{{ name }}.git"
node_version: "4.2.2"
npm_version: "2.14.7"

# for sendGrid
sendgrid_key: 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

dockerfile_environment: |
  ENV DATADOG_HOST {{ datadog_host_address }}
  ENV DATADOG_PORT {{ datadog_port }}
  ENV DOMAIN {{ domain }}
  ENV EMAIL_GITHUB_ACCESS_TOKEN {{ pheidi_email_github_token }}
  ENV FULL_API_DOMAIN https://api.{{ domain }}
  ENV INTERCOM_API_KEY {{ pheidi_intercom_key }}
  ENV INTERCOM_APP_ID {{ pheidi_intercom_id }}
  ENV LOGGLY_TOKEN "{{ loggly_token }}"
  ENV MONGO mongodb://{{ pheidi_mongo_auth }}@{{ mongo_hosts }}/{{ pheidi_mongo_database }}
  ENV MONGO_REPLSET_NAME {{ pheidi_mongo_replset_name }}
  {% if node_env != "production-epsilon" %}
  ENV MONGO_CACERT /opt/ssl/mongo-client/ca.pem
  {% endif %}
  {% if node_env != "production-epsilon" %}
  ENV MONGO_CERT /opt/ssl/mongo-client/cert.pem
  {% endif %}
  {% if node_env != "production-epsilon" %}
  ENV MONGO_KEY /opt/ssl/mongo-client/key.pem
  {% endif %}
  ENV NODE_ENV "{{ node_env }}"
  ENV RABBITMQ_HOSTNAME "{{ rabbit_host_address }}"
  ENV RABBITMQ_PASSWORD "{{ rabbit_password }}"
  ENV RABBITMQ_PORT "{{ rabbit_port }}"
  ENV RABBITMQ_USERNAME "{{ rabbit_username }}"
  ENV ROLLBAR_KEY {{ pheidi_rollbar_token }}
  ENV RUNNABOT_GITHUB_ACCESS_TOKENS {{ pheidi_runnabot_tokens }}
  ENV SENDGRID_KEY {{ sendgrid_key }}
  ENV USER_CONTENT_DOMAIN {{ user_content_domain }}
  ENV WEB_URL https://app.{{ domain }}

container_run_opts: >
  -h {{ name }}
  -d
