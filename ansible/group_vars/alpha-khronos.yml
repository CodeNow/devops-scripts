name: khronos
app_name: "{{ name }}"
security_groups: "{{ sg_dock_services }}"

# copy certs into docker image:
docker_client_certs: true

container_image: registry.runnable.com/runnable/{{ name }}
container_tag: "{{ git_branch }}"
repo: "git@github.com:CodeNow/{{ name }}.git"
node_version: lts
npm_version: 2

# for cron job
# this is the list of queues we want to enqueue a job into
main_cron_queues: "\
  containers.image-builder.prune \
  containers.orphan.prune \
  context-versions.prune-expired \
  images.prune \
  instances.cleanup \
  weave.prune"

canary_cron_queues: "\
  canary.build.run \
  canary.github-branch.run \
  canary.log.run \
  canary.network.run \
  metrics.container-status"

hourly_canary_cron_queues: "\
  canary.failover.run"

# a nice version of the rabbitmq host
cron_rabbit_host_address: "{{ rabbit_host_address }}:{{ rabbit_port }}"
# a quick version of authentication for rabbit for cron
cron_rabbit_auth: --username {{ rabbit_username }} --password {{ rabbit_password }}

# for container settings
dockerfile_environment: |
  ENV API_SOCKET_SERVER https://{{ api_socket_server_hostname }}
  ENV API_URL {{ api_url }}
  ENV CONSUL_HOST {{ consul_host_address }}:{{ consul_api_port }}
  ENV CANARY_API_TOKEN {{ khronos_canary_token | default('undefined') }}
  {% if khronos_canary_failover_token is defined %}
    ENV CANARY_API_FAILOVER_TOKEN {{ khronos_canary_failover_token }}
  {% endif %}
  ENV CANARY_GITHUB_BRANCHES_INSTANCE_ID {{ khronos_canary_github_branches_instance_id | default('undefined') }}
  ENV CANARY_LOG_INSTANCE_ID {{ khronos_canary_logs_instance_id | default('undefined') }}
  ENV CANARY_LOG_TERMINAL_SLEEP 10
  ENV CANARY_REBUILD_INSTANCE_ID {{ khronos_canary_rebuild_instance_id | default('undefined') }}
  ENV CANARY_REBUILD_NAVI_URL {{ khronos_canary_rebuild_navi_url | default('undefined') }}
  ENV DATADOG_HOST {{ datadog_host_address }}
  ENV DATADOG_PORT {{ datadog_port }}
  ENV INTERCOM_API_KEY {{ intercom_api_key | default('undefined') }}
  ENV INTERCOM_APP_ID {{ intercom_app_id | default('undefined') }}
  ENV KHRONOS_MONGO mongodb://{{ khronos_mongo_auth }}@{{ mongo_hosts }}/{{ khronos_mongo_database }}
  {% if node_env != "production-epsilon" %}
    ENV MONGO_CACERT /opt/ssl/mongo-client/ca.pem
    ENV MONGO_CERT /opt/ssl/mongo-client/cert.pem
    ENV MONGO_KEY /opt/ssl/mongo-client/key.pem
  {% endif %}
  ENV NODE_ENV {{ node_env }}
  ENV RABBITMQ_HOSTNAME {{ rabbit_host_address }}
  ENV RABBITMQ_PASSWORD {{ rabbit_password }}
  ENV RABBITMQ_PORT {{ rabbit_port }}
  ENV RABBITMQ_USERNAME {{ rabbit_username }}
  ENV SWARM_HOST http://{{ swarm_host_address }}:{{ swarm_master_port }}
  ENV USER_CONTENT_DOMAIN {{ user_content_domain }}
  ENV WORKER_MAX_RETRY_DELAY 3600000

container_run_opts: >
  -h {{ name }}
  -d

container_run_args: timeout 1h npm start
